---
import Meta from "../components/Meta.astro";
import Timeline from "../components/Timeline.astro";
---

<!doctype html>
<html lang="en">
	<Meta title="Days since new Dia alternative/clone/killer">
		<meta name="description" content="Days since the new Dia alternative/clone/killer.">
	</Meta>

	<body>
		<!-- inline HTML. sue me. -->
		<p class="corner" style="left: 16px;"><a target="_blank" rel="noreferrer" href="https://github.com/kn0ax/dayssincenewdia">GitHub</a></p>


	<h3>It has been</h3><br />
	<h1 id="days-since">_</h1><br />
	<h3 id="time-since">days</h3><h3>&nbsp;since the last "<span style="text-decoration: underline;">The AI Browser Dia</span>".</h3><br />
	<h3><span id="animated-word">alternative</span> was released.</h3><br /><br />

		<h4 id="server-link">________</h4>
		<h4>was released</h4>
		<h4 id="server-date">__ ________, _____</h4><h4>.</h4>
		<br>

		<br>

		<Timeline />

		<br>

		<!-- inline HTML. sue me. -->
		<p class="corner" style="right: 16px;">forked by <a target="_blank" rel="noreferrer" href="https://kn0ax.com/">Kn0ax</a> from <a target="_blank" rel="noreferrer" href="https://github.com/GoldenStack/dayssincelastrustmcserver/">GoldenStack</a></p>
		

	</body>
</html>

<script>
	// Manually sorted - older products go first.
	// Feel free to retroactively add products.

	const servers = [
		{
			name: "Arc Search (iOS) lmao",
			url: "https://internetprotocol.co/web/2024/02/06/the-browser-company-released-arc-search-for-ios/",
			date: new Date("2024-01-29")
		},
		{
			name: "Dia",
			url: "https://www.youtube.com/watch?v=C25g53PC5QQ",
			date: new Date("2024-12-20")
		},
		{
			name: "Google Chrome — Gemini in Chrome",
			url: "https://support.google.com/gemini/answer/16283624?hl=en",
			date: new Date("2025-01-30")
		},
		{
			name: "Genspark AI Browser",
			url: "https://blog.genspark.ai/blog/genspark_ai_browser",
			date: new Date("2025-06-10")
		},
		{
			name: "Perplexity Comet",
			url: "https://techcrunch.com/2025/07/09/perplexity-launches-comet-an-ai-powered-web-browser/",
			date: new Date("2025-07-09")
		},
		{
			name: "Microsoft Edge — Copilot Mode",
			url: "https://www.microsoft.com/en-us/edge/ai-powered/copilot-mode",
			date: new Date("2025-07-28")
		},
		{
			name: "Fellou CE (Agentic AI Browser)",
			url: "https://www.businesswire.com/news/home/20250902953779/en/Worlds-First-Spatial-Agentic-Browser-That-Works-While-You-RestFellou-CE-Launches",
			date: new Date("2025-09-02")
		},
		{
			name: "Opera Neon (agentic)",
			url: "https://press.opera.com/2025/09/30/opera-neon-ai-agentic-browser-release/",
			date: new Date("2025-09-30")
		},
		{
			name: "OpenAI ChatGPT Atlas",
			url: "https://openai.com/index/introducing-chatgpt-atlas/",
			date: new Date("2025-10-21")
		}
	];

	function daysSince(server) {
		const now = Date.now();
		const last = server.date;

		const day = 24 * 60 * 60 * 1000;

		return Math.floor((now - last) / day);
	}

	function renderDate(date) {
		// I am NOT British but I want the day first
		return date.toLocaleString("en-gb", {
			day: "numeric",
			month: "long",
			year: "numeric",
		});
	}

	const id = a => document.getElementById(a);
	const cls = a => document.getElementsByClassName(a)[0];

	function a(name, url) {
		let a = document.createElement("a");
		a.textContent = name;
		a.href = url;
		a.target = "_blank";
		a.rel = "noreferrer";

		return a;
	}

	function render() {
		let last = servers[servers.length - 1];

		let days = daysSince(last);

		id("days-since").textContent = days.toString();
		id("time-since").textContent = days == 1 ? "day" : "days";

		id("server-link").textContent = "";
		id("server-link").appendChild(a(last.name, last.url));

		id("server-date").textContent = renderDate(last.date);
	}

	function renderTimeline(server) {
		let item = document.createElement("div");
		item.className = "timeline-item";

		let container = document.createElement("div");

		let p = document.createElement("p");
		p.className = "title";

		p.appendChild(a(server.name, server.url));

		let text = document.createElement("h");
		text.textContent = " released " + renderDate(server.date);
		p.appendChild(text);

		container.appendChild(p);
		item.appendChild(container);
		return item;
	}

	render();

	servers.toReversed().forEach(server => cls("timeline").appendChild(renderTimeline(server)));

	// Animated word cycling
	const words = ["alternative", "killer", "clone", "competitor", "rival"];
	let currentIndex = 0;
	const animatedWord = id("animated-word");

	function cycleWord() {
		// Add exit animation
		animatedWord.classList.add("word-exit");
		
		setTimeout(() => {
			// Change word
			currentIndex = (currentIndex + 1) % words.length;
			animatedWord.textContent = words[currentIndex];
			
			// Remove exit and add enter animation
			animatedWord.classList.remove("word-exit");
			animatedWord.classList.add("word-enter");
			
			setTimeout(() => {
				animatedWord.classList.remove("word-enter");
			}, 500);
		}, 500);
	}

	// Cycle words every 2.5 seconds
	setInterval(cycleWord, 2500);
</script>

<style>
	html {
		/* background-color: white; */
		background-color: aliceblue;

		/* https://heropatterns.com/ the GOAT */
		background-image: url("data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%239C92AC' fill-opacity='0.4' fill-rule='evenodd'%3E%3Cpath d='M5 0h1L0 6V5zM6 5v1H5z'/%3E%3C/g%3E%3C/svg%3E");
	}

	body {
		text-align: center;

		padding-top: 12rem;
	}

	body * {
		display: inline;
	}

	h1 {
		font-size: 8rem;
	}

	h3 {
		font-size: 2.5rem;
	}

	h4 {
		font-size: 1.75rem;
	}
</style>

<style is:global>
	h2 {
		font-size: 1.8rem;
	}

	p, h {
		font-size: 1.2rem;
	}

	.corner {
		position: absolute;
		top: 16px;
		margin: 0;
		font-size: 1.25rem;
	}

	.corner a {
		text-decoration: none;
	}

	#animated-word {
		display: inline-block;
		position: relative;
		min-width: 150px;
		text-align: center;
	}

	.word-exit {
		animation: slideDown 0.5s ease-in-out forwards;
	}

	.word-enter {
		animation: slideUp 0.5s ease-in-out forwards;
	}

	@keyframes slideDown {
		0% {
			transform: translateY(0);
			opacity: 1;
		}
		100% {
			transform: translateY(30px);
			opacity: 0;
		}
	}

	@keyframes slideUp {
		0% {
			transform: translateY(-30px);
			opacity: 0;
		}
		100% {
			transform: translateY(0);
			opacity: 1;
		}
	}
</style>
